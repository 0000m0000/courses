mod%*% solve(t(mod) %*% mod)
mod %*% solve(t(mod) %*% mod)
dim(mod %*% solve(t(mod) %*% mod))
dim(mod %*% solve(t(mod) %*% mod) %*% t(mod))
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
y <- rnorm(20)
h1 %*5 y
h1 %*% y
object.size(DF)
?object.size
object.size(DF,units="Gb")
aa <- object.size(DF)
print(aa,units="Gb")
aa <- object.size(ll)
print(aa,units="Gb")
library(Matrix)
?sparseMatrix
bb <- rbinom(1e7,size=1,prob=0.5)
object.size(bb)
object.size(as.vector(ll[[1]]))
cbind(ll)
df2 <- as.matrix(DF)
object.size(df)
object.size(df2)
df2[1,]
df2 <- as.data.frame(DF)
object.size(df2)
mm <- Matrix(as.matrix(df2))
object.size(mm)
object.size(ll)
object.size(ll)/object.size(mm)
dim(h1)
tmp <- solve(h1,mm)
tmp
aa <- solve(mod,mm)
dim(mod)
aa <- solve(t(mod),mm)
dim(mm)
mm[1,]
class(mm)
tmp <- mm %*% h1
class(tmp)
object.size(tmp)
object.size(tmp)/object.size(mm)
print(object.size(tmp),units="gb")
print(object.size(tmp),units="Gb")
tmp[1,]
mm[1,]
mean(mm[1,1:10])
mean(mm[1,21:30])
mean(mm[1,11:20])
tmp[2,]
mean(mm[1,1:10])
tmp[3,]
mean(mm[3,1:10])
mm <- Matrix(as.matrix(df2))
rowSums(mm)
aa <- rowSums(mm)
class(aa)
length(aa)
dat <- mm
dim(dat)
rm(mm)
ls()
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,)
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,y)
rm(aa)
rm(bb)
ls()
class(dat)
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
7 * 20
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
rss0[1,]
length(rss0)
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
fstats[1]
gc()
fstats <- function(dat,mod,mod0=NULL){
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
rm(rss0,rss1)
gc()
return(fstats)
}
ls()
rm(fstats)
rm(Id)
rm(df0)
rm(df1)
rm(rss0)
rm(rss1)
ls()
rm(n)
rm(p)
rm(m)
gc()
mem_change <- function(code) {
start <- mem()
expr <- substitute(code)
eval(expr, parent.frame())
rm(code, expr)
round(mem() - start, 3)
}
mem_change(fstats(dat,mod,md0))
mem_change(fstats(dat,mod,mod0))
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem()
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem_change(fstats(dat,mod,mod0))
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
mem_change(fstats(dat,mod,mod0))
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
twitterMap
args(twitterMap)
twitterMap("IrvingChamber",userLocation="Missouri")
library(forecast)
data(usnetelec)
library(expsmooth)
install.packages("expsmooth")
data(usnetelec)
data(usnetelec)
library(expsmooth)
data(usnetelec)
usnetelec
arimafit <- auto.arima(usnetelec)
fcasts <- forecast(arimafit)
plot(fcast)
plot(fcasts)
data(bonds)
arimafit <- auto.arima(bonds)
fcast <- forecast(arimafit)
plot(fcast)
data(ukcars)
plot(ukcars)
ukcars
class(ukcars)
frequency(ukcars)
?msts
ts1
from.dat <- as.Date("01/01/11", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/11", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
ts1 <- as.ts(GOOG$GOOG.Open,frequency=365)
ts1 <- as.ts(GOOG$GOOG.Open)
ts1
frequency(ts1)
ts1$frequency
names(ts1)
?ts
?msts
msts1 <- msts(data=GOOG$GOOG.Open,seasonal.periods=c(12,360))
plot(msts1)
msts1
frequency(msts1)
arimafit <- auto.arima(msts1)
fcast <- forecast(arimafit)
plot(fcast)
?ad
?Ad
Ad(GOOG)
GOOG[1,]
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
tmp <- Op(GOOG)
forecast(Tmp)
forecast(tmp)
?forecast(tmp)
?forecast
tmp <- Op(GOOG)
rwf(tmp,drift=TRUE)
plot(rwf(tmp,drift=TRUE))
plot(rwf(tmp,drift=TRUE,h=254))
?rwf
plot(forecast(auto.arima(tmp),h=254))
tmp[1]
class(tmp)
tmp <- as.ts(tmp)
plot(forecast(auto.arima(tmp),h=254))
plot(forecast(auto.arima(tmp[1:500]),h=254))
?auto.arima
data(expsmooth)
ls()
data()
data(package="expsmooth")
data(visitors)
visitors
frequency(visitors)
?ts
?ar
ar(ts1[1:500])
ar1 <- ar(ts1[1:500])
ar1
forecast(ar1,h=254)
plot(forecast(ar1,h=254))
?ar
tmp <- dshw(ts1[1:500])
tmp <- dshw(ts1[1:500],period1=12,period2=360)
tmp <- dshw(ts1[1:500],period1=12,period2=360)
msts1
tmp <- dshw(msts1[1:500],period1=12,period2=360)
tmp <- dshw(msts1[1:600],period1=12,period2=360)
tmp <- dshw(msts1[1:720],period1=12,period2=360)
plot(tmp)
plot(tmp,h=(954-720))
plot(tmp
)
plot(tmp)
lines(720:954,mtsts1[720:954],col="red")
lines(720:954,msts1[720:954],col="red")
tmp <- Op(GOOG)
tmp <- dshw(tmp[1:500],period1=12,period2=360)
tmp <- as.numeric(Op(GOOG))
tmp[1]
tmp <- dshw(tmp[1:500],period1=12,period2=360)
tmp <- dshw(tmp[1:720],period1=12,period2=360)
plot(tmp)
3*360
lines((721:954)/360,tmp[721:954],col="red")
tmp[1]
class(tmp)
tmp <- as.numeric(Op(GOOG))
fcast <- dshw(tmp[1:720],period1=12,period2=360)
plot(fcast)
lines((721:954)/360,tmp[721:954],col="red")
lines(((721:954)/360+1),tmp[721:954],col="red")
fcast <- dshw(tmp[1:480],period1=12,period2=48)
plot(fcast)
lines(((481:954)/48+1),tmp[481:954],col="red")
periodicity(GOOG)
ndays(GOOG)
to.weekly(GOOG)
to.monthly(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
head(GOOG)
library(forecast)
ts1 <- as.ts(Op(to.monthly(GOOG)),frequency=12)
series.decompose(ts1)
series.decompose
?decompose
decompose(ts1)
library(forecast)
ts1 <- as.ts(Op(to.monthly(GOOG)),frequency=12)
ts1
library(forecast)
ts1 <- ts(as.numeric(Op(to.monthly(GOOG))),frequency=12)
ts1
to.monthly(GOOG)
ts1
decompose(ts1)
plot(decompose(ts1))
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
ts1
mGoog
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="yahoo", from = from.dat, to = to.dat)
head(GOOG)
GOOG[1,]
rm(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
GOOG[1,]
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
ts1
plot(ts1)
plot(decompose(ts1))
?ma
forecast(ma(ts1))
createTimeSlice
library(caret)
createTimeSlice
ClCl
ClCl(GOOG)
plot(ClCl(GOOG))
ts1 <- ts(ClCl(GOOG))
plot(ts1)
plot(decompose(ts1))
ts1 <- ts(ClCl(to.monthly(GOOG)))
plot(decompose(ts1))
ts1
ts1 <- ts(ClCl(to.monthly(GOOG)),frequency=12)
ts1
plot(ts1)
plot(decompose(ts1))
?trainControl
sessionInfo()
library(caret)
sessionInfo()
?createTimeSlices
as.numeric(ts1)
?DVI
?createTimeSlices
tmp <- createTimeSlices(ts1,initialWindow=24,horizon=12)
tmp
length(tmp)
tmp$train[[1]]
tmp$train[[2]]
tmp <- createTimeSlices(ts1,initialWindow=24,horizon=12,fixedWindow=FALSE)
tmp
tmp <- createTimeSlices(ts1,initialWindow=24,horizon=12)
ts1[1:12]
ts1
ts1[1:24]
ts1[1,]
window(ts1,1,24)
window(ts1,1,end=24)
?window
window(ts1,1)
window(ts1,5)
window(ts1,start=1,end=5)
window(ts1,start=5,end=7)
window(ts1,start=5,end=7)
window(ts1,start=5,end=6)
window(ts1,start=5,end=7-0.1)
window(ts1,start=1,end=5)
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(6-0.01))
lines(ts1Test)
ts1Test
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
plot(ts1Train)
lines(ts1Test)
plot(ts1Train,xlim=c(0,7))
plot(ts1Train,xlim=c(1,7))
lines(ts1Test,col="red")
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
plot(decompose(ts1),xlab="Years+1")
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
plot(ts1Train,xlim=c(1,7))
lines(ts1Test,col="red")
ma(ts1Train)
ma(ts1Train,order=3)
plot(forecast(ma(ts1Train)))
plot(forecast(ma(ts1Train,3)))
?etc
?ets
plot(ma(ts1Train))
plot(ma(ts1Train,10))
lines(ts1Train,col="red")
?ma
ma(ts1Train,3)
ma(ts1Train,5)
ma
?ksmooth
plot(forecast(ma(ts1Train,3)))
?ets
plot(forecast(ma(ts1Train,3)))
?ets
?ets
ets1 <- ets(ts1Train)
plot(forecast(ets1))
ets1 <- ets(ts1Train,model="MMM")
plot(forecast(ets1))
?ets
ets1 <- ets(ts1Train,model="MAN")
plot(forecast(ets1))
ets1 <- ets(ts1Train,model="MAA")
plot(forecast(ets1))
ets1 <- ets(ts1Train,model="MMdM")
plot(forecast(ets1))
ets1 <- ets(ts1Train,model="MMM")
plot(forecast(ets1))
lines(ts1Test,col="red")
ets1 <- ets(ts1Train,model="MMM")
fcast <- forecast(ets1)
plot(fcast); lines(ts1Test,col="red")
accuracy(fcast,ts1Test)
ts1
msts1 <- ts(googOpen,frequency=c(1,3,6,9))
msts1 <- ts(googOpen,frequency=c(1,3,6))
?msts
msts1 <- msts(googOpen,seasonal.periods=c(1,5,25,50,100,300))
msts1[1,]
msts1
ets1 <- ets(msts1)
plot(forecast(ets1))
ets1 <- ets(msts1,"MMM")
plot(forecast(ets1))
msts1 <- msts(googOpen,seasonal.periods=c(1,2,4))
plot(forecast(ets1))
ets1 <- ets(msts1,"MMM")
plot(forecast(ets1))
ts1
googOpen <- Op(GOOG)
msts1 <- msts(googOpen,seasonal.periods=c(1,2,4,8,16,32,64,128))
plot(msts1)
msts1
length(msts1)
tmptr <- window(msts1,1,8-0.1)
plot(tmptr)
tmpte <- window(msts1,8,13)
tmpte <- window(msts1,8,12)
plot(tmptr,xlim=c(0,12))
lines(tmpte)
lines(tmpte,col="red")
ets1 <- ets(tmptr,method="MMM")
ets1 <- ets(tmptr,model="MMM")
msts1 <- msts(googOpen,seasonal.periods=c(8,16,32,64,128))
tmpte <- window(msts1,8,12); tmptr <- window(msts1,1,8-0.1)
ets1 <- ets(tmptr,model="MMM")
msts1 <- msts(googOpen,seasonal.periods=c(16,32,64,128))
tmpte <- window(msts1,8,12); tmptr <- window(msts1,1,8-0.1)
ets1 <- ets(tmptr,model="MMM")
msts1 <- msts(googOpen,seasonal.periods=c(16,32,64))
tmpte <- window(msts1,8,12); tmptr <- window(msts1,1,8-0.1)
ets1 <- ets(tmptr,model="MMM")
ets1 <- ets(tmptr,model="MMN")
plot(forecast(ets1))
ets1 <- ets(tmptr,model="MNM")
frequency(msts1)
msts1 <- msts(googOpen,seasonal.periods=c(8,16,32))
tmpte <- window(msts1,8,12); tmptr <- window(msts1,1,8-0.1)
ets1 <- ets(tmptr,model="MNM")
msts1 <- msts(googOpen,seasonal.periods=c(2,4,8))
tmpte <- window(msts1,8,12); tmptr <- window(msts1,1,8-0.1)
ets1 <- ets(tmptr,model="MNM")
plot(forecast(ets1))
lines(tmpte)
lines(tmpte,col="red")
getwd()
setwd("~/Dropbox/Jeff/teaching/2013/modules/")
setwd("08_PredictionAndMachineLearning/")
getwd()
setwd("026forecasting/")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
