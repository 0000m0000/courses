args(train.default)
?train
?preProcess
library(slidify)
library(caret)
setwd("~/Dropbox/Jeff/teaching/2013/")
setwd("~/modules/")
setwd("modules/08_PredictionAndMachineLearning/012trainOptions/")
slidify("index.Rmd")
browseURL("index.html")
args(trainControl)
?trainControl
?train
?trainControl
setwd("~/Dropbox/Jeff/2013/")
setwd("../teaching/2013/modules/08_PredictionAndMachineLearning/")
setwd("012trainOptions/")
library(slidify)
library(caret)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type ~.,data=training, method="glm")
set.seed(32343)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
modelFit
set.seed(32343)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
modelFit
library(caret)
library(slidify)
setwd("~/Dropbox/Jeff/teaching/2013/modules/08_PredictionAndMachineLearning/")
setwd("013basicPreprocessing/")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,-58]
testing <- spam[-inTrain,-58]
set.seed(32343)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
modelFit
modelFit <- train(type ~.,data=training,method="glm")
modelFit <- train(type ~.,data=training,method="glm")
training[1,]
modelFit <- train(type ~.,data=training, method="glm")
modelFit <- train(type ~.,data=training, method="glm")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
hist(training$capitalAve,main="",xlab="ave. capital run length")
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training,method=c("center","scale"))
trainCapAveS <- predict(preObj,training)$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
mean(training$capitalAve)
sd(training$capitalAve)
preObj <- preProcess(training,method=c("center","scale"))
testCapAveS <- predict(preObj,testing)$capitalAve
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training,method=c("center","scale"))
trainCapAveS <- predict(preObj,training)$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training)$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
set.seed(32343)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
modelFit
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58])
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
hist(trainCapAveS)
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
par(mfrow=c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
par(mfrow=c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
par(mfrow=c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?preProcess
length(training)
names(training)
dim(training)
training$capAve <- training$capitalAve
training$capAve[sample(1:dim(training)[1],size=100)] <- NA
preObj <- preProcess(training,method="knnImpute")
preObj <- preProcess(training[,-58],method="knnImpute")
training$capAve <- training$capitalAve
training$capAve[sample(1:dim(training)[1],size=100)] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
install.packages("RANN")
training$capAve <- training$capitalAve
training$capAve[sample(1:dim(training)[1],size=100)] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
plot(capAve,training$capitalAve)
plot(capAve - training$capitalAve)
sum(capAve != training$capitalAve)
?preProcess
?preProcess
names(training[,-58])
capAve
hist(capAve)
mean(capAve)
sd(capAve)
quantile(capAve)
capAve <- predict(preObj,training[,-58])$capitalAve
plot(training$capitalAve,capAve)
abline(c(0,1))
par(mfrow=c(1,1))
plot(training$capitalAve,capAve)
l(training$capitalAve,capAve)
lm(training$capitalAve,capAve)
lm(training$capitalAve~capAve)
lm(training$capitalAve~capAve)$residuals
mean(capAve)
sd(capAve)
training$capAve <- training$capitalAve
training$capAve[sample(1:dim(training)[1],size=100)] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
capAveTruth
capAve
plot(capAve,capAveTruth)
abline(c(0,1))
plot(capAve-capAveTruth)
boxplot(capAve-capAveTruth)
hist(capAve-capAveTruth)
quantile(capAve-capAveTruth)
plot(density(capAve-capAveTruth))
sum(capAve-capAveTruth < 0.001)
sum(abs(capAve-capAveTruth) < 0.001)
sum(abs(capAve-capAveTruth) < 0.01)
sum(abs(capAve-capAveTruth) < 0.1)
mean(abs(capAve-capAveTruth) < 0.1)
length(capAVe)
length(capAve)
quantile(capAve - capAveTruth)
quantile((quantile(capAve - capAveTruth))[selectNA])
selectNA
set.seed(13343)
# Make some values NA
training$capAve <- training$capitalAve
selectNA <- sample(1:dim(training)[1],size=100)
training$capAve[selectNA] <- NA
# Impute and standardize
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
# Standardize true values
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((quantile(capAve - capAveTruth))[selectNA])
sum(is.na(capAve))
sum(is.na(capAveTruth))
selectNA
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.01)
sum(selectNA)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)
sum(selectNA'')
sum(selectNA)
set.seed(13343)
# Make some values NA
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)
training$capAve[selectNA] <- NA
# Impute and standardize
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
# Standardize true values
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
(quantile(capAve - capAveTruth))[selectNA]
quantile(capAve - capAveTruth)
quantile(capAve - capAveTruth)[selectNA])
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA])
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA==1])
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA==0])
set.seed(13343)
# Make some values NA
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA] <- NA
# Impute and standardize
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
# Standardize true values
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA==1])
quantile((capAve - capAveTruth)[selectNA])
quantile((capAve - capAveTruth)[!selectNA])
slidify("index.Rmd")
browseURL("index.html")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
plot(training)
plot(training[,1:10])
install.packages("corrplot")
library(corrplot)
corrplot(M, method="number", col="black", cl.pos="n")
data(mtcars)
M <- cor(mtcars)
corrplot(M)
M <- cor(spam)
M <- cor(spam[,-58])
dim(M)
corplot(M
)
corrplot(M)
prcomp
pr1 <- prcomp(spam[,-58])
names(pr1)
plot(pr1$rotation[,1])
dim(pr1$rotation)
dim(pr1$center)
dim(pr1$scale)
dim(pr1$x)
?prcomp
plot(pr1$rotation[1,])
plot(pr1)
par(mfrow=c(1,1))
plot(pr1)
plot(pr1[1])
plot(pr1[1,])
plot(pr1[1,])
plot(pr1$rotation[1,])
ss <- svd(spam - rowMeans(spam))
ss <- svd(spam[,-58] - rowMeans(spam[,-58]))
plot(ss$v[,1])
plot(ss$v[,2])
plot(ss$v[,3])
plot(ss$u[,1])
plot(ss$u[,2])
ss <- svd(spam[,-58] - colMeans(spam[,-58]))
plot(ss$v[,1])
?sweep
tmp <- sweep(spam,1,mean)
tmp <- sweep(spam[,-58],1,mean)
tmp <- sweep(spam[,-58],1)
tmp <- sweep(spam[,-58],1,colMeans(spam))
tmp <- sweep(spam[,-58],1,colMeans(spam[,-58]))
tmp <- sweep(spam[,-58],2,colMeans(spam[,-58]))
ss <- svd(tmp)
plot(ss$v[,1])
plto(ss$v[,2])
tmp <- sweep(spam[,-58],1,rowMeans(spam[,-58]))
ss <- svd(tmp)
plot(ss$v[,1])
plot(ss$v[,2])
plot(training$you,training$your)
M <- cor(training[,-58])
which.max(M
)
max(M)
which(abs(M) > 0.99)
which.int
?which
which(abs(M) > 0.99,arr.ind=T)
sum(abs(M) > 0.99,arr.ind=T)
M <- cor(training[,-58])
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
plot(spam[,34],spam[,32])
names(spam)[c(34,32)]
getwd()
setwd("../014preProcessingPCA/")
slidify("index.Rmd")
browseURL("index.html")
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
pr1 <- prcomp(spam[,c(34,32)])
names(pr1)
pr1$rotation
X <- 0.71*training$num415 + 0.71*training$num857
Y <- 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$rotations[,1],prComp$rotations[,2])
prComp
names(prComp)
plot(prComp$x[,1])
plot(prComp$x[,1],prComp$x[,2])
plot(prComp$x[,1],prComp$x[,2])
slidify("index.Rmd")
browseURL("index.html")
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1])
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1],prComp$x[,2])
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1],prComp$x[,2],col=(spam$type=="spam" + 1))
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1],prComp$x[,2],col=(spam$type=="spam"*1 + 1))
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1],prComp$x[,2],col=((spam$type=="spam")*1 + 1))
plot(prComp$x[,1],col=((spam$type=="spam")*1 + 1))
plot(prComp$x[,2],col=((spam$type=="spam")*1 + 1))
boxplot(prComp$x[,2] ~ spam$type)
boxplot(prComp$x[,1] ~ spam$type)
boxplot(log10(prComp$x[,1]) ~ spam$type)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],col=((spam$type=="spam")*1 + 1))
plot(prComp$x[,1],prComp$x[,2])
plot(prComp$x[,2],col=((spam$type=="spam")*1 + 1))
prComp <- prcomp(spam[,-58])
plot(prComp$x[,1],prComp$x[,2],col=((spam$type=="spam")*1 + 1))
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=((spam$type=="spam")*1 + 1))
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
?preProcess
spamPC <- preProcess(log10(spam[,-58]+1),pcaComp=2)
names(spamPC)
plot(spamPC$rotation)
spamPC$rotation
names(spamPC)
spamPC$pcaComp
spamPC$numComp
spamPC$data
preProc <- preProcess(log10(spam[,-58]+1),pcaComp=2)
spamPC <- predict(spamPC,spam[,-58])
plot(spamPC[,1])
plot(spam[,1])
plot(spam[,1],spamPC[,1])
quantile(spam-spamPC)
quantile(spam[,-58]-spamPC[,-58])
quantile(spam[,1:5]-spamPC[,1:5])
names(spamPC)
dim(spamPC)
dim(spam)
quantile(spam[,-58]-spamPC)
quantile(spam[,-58]-data.matrix(spamPC))
quantile(spam[,1]-spamPC[,1])
plot(spam[,1],spamPC[,1])
plot(spam[,2],spamPC[,2])
plot(spam[,3],spamPC[,3])
cor(spam[,3],spamPC[,3])
preProc <- preProcess(log10(spam[,-58]+1),method="pca")
spamPC <- predict(spamPC,spam[,-58])
preProc <- preProcess(log10(spam[,-58]+1),method="pca")
spamPC <- predict(preProc,spam[,-58])
plot(spam[,1],spamPC[,1])
names(preProc)
preProc$rotation
dim(preProc$rotation)
names(preProc)
preProc$pcaComp
preProc$data
preProc$numComp
plot(preProc$rotation[,1])
plot(preProc$rotation[,1],preProc$rotation[,2])
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(spamPC,spam[,-58])
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,spam[,-58])
names(preProc)
dim(preProc(rotation))
dim(preProc$rotation)
plot(preProc$rotation[1,])
plot(preProc$rotation[,1])
plot(preProc$rotation[,2])
plot(preProc$rotation[,1],preProc$rotation[,2])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$rotation[,1],prComp$rotation[,2])
dim(prComp$rotation)
?preProcess
,preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,spam[,-58])
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,spam[,-58])
plot(spamPC[,1])
plot(spamPC[,1],spam[,1])
plot(spamPC[,2],spam[,2])
names(preProc)
preProc$data
preProc$Rotation
preProc$rotation
preProc
preProc$numComp
preProc$pcaComp
prePrc
names(preProc)
preProc$bc
preProc$yj
preProc$et
preProc$mean
preProc$cols
preProc$data
head(spamPC)
plot(spamPC[,1])
plot(spamPC[,1],spamPC[,2])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,spam[,-58])
head(spamPC)
names(spamPC)
spamPC$our
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC)
plot(spamPC[,1],spamPC[,])
plot(spamPC[,1],spamPC[,2])
plot(spamPC[,1],spamPC[,2],col=typeColor)
?train
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
train(type ~ . ,method="glm",preProcess=preProc,data=spam)
train(type ~ . ,method="glm",preProcess="preProc"psca,data=spam)
train(type ~ . ,method="glm",preProcess="pca",data=spam)
?preProcess
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(training[,-58]+1))
head(spamPC)
modelFit <- train(spam$type ~ spamPC)
class(spamPC)
modelFit <- train(spam$type ~ .,data=spamPC)
length(spam$tyep)
length(spam$type)
dim(spamPC)
modelFit <- train(training$type ~ .,data=spamPC)
modelFit <- train(training$type ~ .,method="glm",data=spamPC)
predict(modelFit,testPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
predict(modelFit,testPC)
confusionMatrix(testing$type,predict(modelFit,testPC))
slidify("index.Rmd")
browseURL("index.html")
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
