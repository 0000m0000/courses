system.time(Reduce("+",ll))
?DataFrame
?as.DataFrame
?
DF <- DataFrame(ll)
DF <- DataFrame(ll)
Df
DF
dim(DF)
system.time(Reduce("+",ll))
ll2 <- as.list(DF)
class(DF)
class(ll2)
?Qr
mod <- cbind(repmod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
)
mod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
h1 <- solve(t(mod) %*% mod) %*% mod
h1 <- solve(t(mod) %*% mod) %*% t(mod)
dim(h1)
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
dim(h1)
h1 <- t(mod) %*% solve(mod %*% t(mod)) %*% mod
solve(t(mod) %*% mod)
t(mod) %*% solve(t(mod) %*% mod)
mod%*% solve(t(mod) %*% mod)
mod %*% solve(t(mod) %*% mod)
dim(mod %*% solve(t(mod) %*% mod))
dim(mod %*% solve(t(mod) %*% mod) %*% t(mod))
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
y <- rnorm(20)
h1 %*5 y
h1 %*% y
object.size(DF)
?object.size
object.size(DF,units="Gb")
aa <- object.size(DF)
print(aa,units="Gb")
aa <- object.size(ll)
print(aa,units="Gb")
library(Matrix)
?sparseMatrix
bb <- rbinom(1e7,size=1,prob=0.5)
object.size(bb)
object.size(as.vector(ll[[1]]))
cbind(ll)
df2 <- as.matrix(DF)
object.size(df)
object.size(df2)
df2[1,]
df2 <- as.data.frame(DF)
object.size(df2)
mm <- Matrix(as.matrix(df2))
object.size(mm)
object.size(ll)
object.size(ll)/object.size(mm)
dim(h1)
tmp <- solve(h1,mm)
tmp
aa <- solve(mod,mm)
dim(mod)
aa <- solve(t(mod),mm)
dim(mm)
mm[1,]
class(mm)
tmp <- mm %*% h1
class(tmp)
object.size(tmp)
object.size(tmp)/object.size(mm)
print(object.size(tmp),units="gb")
print(object.size(tmp),units="Gb")
tmp[1,]
mm[1,]
mean(mm[1,1:10])
mean(mm[1,21:30])
mean(mm[1,11:20])
tmp[2,]
mean(mm[1,1:10])
tmp[3,]
mean(mm[3,1:10])
mm <- Matrix(as.matrix(df2))
rowSums(mm)
aa <- rowSums(mm)
class(aa)
length(aa)
dat <- mm
dim(dat)
rm(mm)
ls()
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,)
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,y)
rm(aa)
rm(bb)
ls()
class(dat)
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
7 * 20
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
rss0[1,]
length(rss0)
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
fstats[1]
gc()
fstats <- function(dat,mod,mod0=NULL){
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
rm(rss0,rss1)
gc()
return(fstats)
}
ls()
rm(fstats)
rm(Id)
rm(df0)
rm(df1)
rm(rss0)
rm(rss1)
ls()
rm(n)
rm(p)
rm(m)
gc()
mem_change <- function(code) {
start <- mem()
expr <- substitute(code)
eval(expr, parent.frame())
rm(code, expr)
round(mem() - start, 3)
}
mem_change(fstats(dat,mod,md0))
mem_change(fstats(dat,mod,mod0))
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem()
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem_change(fstats(dat,mod,mod0))
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
mem_change(fstats(dat,mod,mod0))
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
twitterMap
args(twitterMap)
twitterMap("IrvingChamber",userLocation="Missouri")
list.files
args(list.files)
?list.files
getwd()
list.files()
list.files(full.names=TRUE)
normalizePath
?normalizePath
library(makeslides)
setup("gd")
setwd("01_01_obtainingDatamotivation/")
sf()
bu()
setwd("../01_02_rawAndProcessedData/")
sessionInfo()
library(slidifyLibraries)
sessionInfo()
getwd()
getwd()
sf()
bu()
setwd("../01_03_componentsOfTidyData/")
sf()
bu()
setwd("../01_04_downLoadingFiles/")
sf()
bu()
setwd("../01_05_readingLocalFiles/")
sf()
bu()
setwd("../01_06_readingExcelFiles/")
sf(
)
sf()
of()
sf()
bu()
setwd("../01_07_readingXML/")
sf()
bu()
getwd()
of()
sf()
bu()
setwd("../01_08_readingJSON/")
sf()
sf()
of()
sf()
bu()
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
class(jsonData)
jsonData$owner
class(jsonData$owner)
8*5
setwd("../02_01_readingMySQL/")
sf()
bu()
of()
sf()
bu()
setwd("../02_02_readingHDF5/")
sf()
bu()
sf()
setwd("../02_03_readingFromTheWeb/")
sf()
sf()
of()
sf()
bu()
myapp <- oauth_app("twitter", key = "TYrWFPkFAkn4G5BbkWINYw")
library(httr)
myapp <- oauth_app("twitter", key = "TYrWFPkFAkn4G5BbkWINYw")
myapp <- oauth_app("twitter", key = "TYrWFPkFAkn4G5BbkWINYw")
myapp <- oauth_app("twitter", key = "ruBLfPBmC8lmHMsEjYACQ")
?oauth_app
myapp <- oauth_app("twitter", key = "ruBLfPBmC8lmHMsEjYACQ",secret="tkYlQqSzSHIulVgCh3t6sZJzVC25PFwlVDxVDfdaBM")
sig <- sign_oauth1.0(myapp,
token = "405033226-r7BCidIWGL2D8KGMNHcNzbCzvLBCpIiJJXz74aJC",
token_secret = "cEbM8Exf91nxxfLAB94W8ilGPT1hVk2zEDBbZGz3Sc")
GET("https://api.twitter.com/1/statuses/home_timeline.json", sig)
?sign_oauth1.0
?sign_oauth1.0a
?oauth_app
GET("https://api.twitter.com/1/statuses/home_timeline.json", sig)
GET(" http://api.twitter.com/1/statuses/home_timeline.json?count=20&max_id=231257117791776770", sig)
GET(" http://api.twitter.com/1/statuses/home_timeline.json?count=20", sig)
GET(" http://api.twitter.com/1/statuses", sig)
sig
?sign_oauth1.0
GET("https://api.twitter.com/1/statuses/home_timeline.json", sig)
GET(" http://api.twitter.com/1/statuses", sig)
GET("https://api.twitter.com/1/statuses/home_timeline.json", sig)
GET("https://api.twitter.com/1/statuses/home_timeline", sig)
GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
tmp = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
fromJSON(tmp)
fromJSON(content(tmp,as="text"))
?content
content(tmp)
class(content(tmp))
class(content(tmp,as="raw"))
content(tmp,as="raw")
content(tmp,as="texted")
content(tmp,as="text")
cat(content(tmp,as="text"))
fromJSON(cat(content(tmp,as="text")))
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
names(homeTL)
content(homeTL)
class(content(homeTL))
?fromJSON
class(content(homeTL,as="text"))
jsonlite::fromJSON(content(homeTL,as="text"))
jsonlite::fromJSON(cat(content(homeTL,as="text")))
jsonlite::fromJSON(content(homeTL,as="text"))
content(homeTL,as="text")
jsonlite::fromJSON(content(homeTL))
jsonlite::fromJSON(toJSON(content(homeTL)))
tmp = jsonlite::fromJSON(toJSON(content(homeTL)))
tmp[1,]
tmp[1,1:3]
json2[1,1:4]
tmp[1,1:4]
getwd()
setwd("../02_04_readingFromAPIs/")
sf()
bu()
?httr
getwd()
sf()
bu()
setwd("../02_05_readingFromOtherSources/")
sf()
bu()
of()
sf()
bu()
setwd("../03_01_subsettingAndSorting/")
sf()
of()
sf()
bu()
getwd()
sf()
bu()
sf()
bu()
setwd("../03_02_summarizingData/")
sf()
bu()
X <- matrix(1:100,nrow=10)
head(X)
?head
setwd("../03_03_creatingNewVariables/")
sf()
bu()
of()
slidify2 <- function(inputFile){
slidify(knit(inputFile), knit_deck = FALSE)
}
setwd("../023dataTable/")
slidify2("index.Rmd")
browseURL("index.html")
?boxCox
?box.cox
?boxcox
sf()
getwd(
)
setwd("../03_03_creatingNewVariables/")
sf()
bu()
sf()
sf()
setwd("../03_04_reshapingData/")
sf()
bu()
getwd()
of()
sf()
bu()
setwd("../03_05_mergingData/")
sf()
bu()
setwd("../04_04dataResources/")
setwd("../04_01dataResources/")
setwd("../04_01_editingTextVariables/")
sf()
bu()
setwd("../04_02_regularExpressions/")
sf()
bu()
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT[,c(2,3)]
DT[,list(mean(x))]
mean(DT[,1])
DT[,list(mean(x),table(y))]
table(DT$y)
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT
DT2
DT[,{m:= {tmp <- (x+y); log2(tmp)}]
DT[,m:= {tmp <- (x+y); log2(tmp)}]
DT
DT[,m:= {tmp <- (x+z); log2(tmp)}]
DT[,m:= {tmp <- (x+z); log2(tmp+1)}]
DT[,m:= {tmp <- (x+z); log2(tmp+5)}]
DT
DT[,a:=x>0]
DT
DT[,a:=x>0]
DT[,b = mean(x+w),by=a]
DT[,a:=x>0]
DT[,b:= mean(x+w),by=a]
DT
getwd(
)
sf()
bu()
getwd()
bu()
bu()
setwd("../04_03_regularExpressionsII/")
sf()
bu()
of()
sf()
bu()
setwd("../04_04_workingWithDates/")
sf()
bu()
getwd()
sf()
bu()
setwd("../04_05_dataResources/")
sf()
bu()
slidify2
library(microbenchmark)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT
system.time(DT[, .N, by=x])
system.time(table(DT$X))
system.time(table(DT$x))
DT <- data.table(x=rep(c("a","b","c"),each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
head(DT['a'])
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x); setkey(DT2, x)
merge(DT1, DT2)
getwd()
setwd("../01_09_dataTable/")
sf()
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT
DT[,list(mean(x),sum(z))]
DT[,table(y)]
sf()
rm(list=ls())
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
system.time(fread=fread(file))
system.time(read.table(file, header=TRUE, sep="\t"))
system.time(fread(file))
rm(list=ls())
sf()
DT
sf()
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y=="a",]
DT[c(2,3)]
DT[,c(2,3)]
slidify2("index.Rmd")
slidify2 <- function(inputFile){
slidify(knit(inputFile), knit_deck = FALSE)
}
slidify2("index.Rmd")
bu()
DT2 <- DT
DT[, y:= 2]
DT
head(DT,n=3)
head(DT2,n=3)
sf()
slidify2("index.Rmd")
bu()
slidify2("index.Rmd")
slidify2("index.Rmd")
bu()
sf()
slidify2("index.Rmd")
bu()
sf()
slidify2("index.Rmd")
bu()
